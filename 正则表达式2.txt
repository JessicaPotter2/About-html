前瞻
'a2*3'.replace(/\w(?=\d)/g,'Q')
"Q2*3"
(?=\d)为断言部分，不参与规则部分，不是匹配部分，仅\w为匹配部分
'a2*34v8'.replace(/\w(?=\d)/g,'Q')
"Q2*Q4Q8"
'a2*34vv'.replace(/\w(?=\d)/g,'Q')
"Q2*Q4vv"
'a2*34v8'.replace(/\w(?!\d)/g,'Q')
"aQ*3QvQ"
'a2*34vv'.replace(/\w(?!\d)/g,'Q')
"aQ*3QQQ"

对象属性，不能对属性进行设置，设置无效
global:是否全文搜索，默认false
ignore case:是否大小写敏感，默认false
multiline:多行搜索，默认值false
lastIndex:当前表达式匹配内容的最后一个字符的下一个位置
source:正则表达式的文本字符串

在线编辑html，css，Javascript网站：
http://jsbin.com/henodoluze/edit?html,js,console,output
var reg1=/\w/;
var reg2=/\w/gim;
reg1.global
false
reg1.ignoreCase
false
reg1.multiline
false
reg2.global
true
reg2.ignoreCase
true
reg2.multiline
true
reg1.source
"\w"
reg2.source
"\w"

RegExp.prototype.test(str)
用于测试字符串参数中是否存在匹配正则表达式模式的字符串
若存在返回true，否则返回false
var reg1=/\w/;
var reg2=/\w/g;
reg1.test('a')
true
reg1.test('$')
false
reg2.test('ab')     //第一遍
true
reg2.test('ab')     //第二遍
true
reg2.test('ab')     //第三遍   ，lastIndex 作用
false
reg2.test('ab')     //第四遍
true
reg2.test('ab')     //第五遍
true
reg2.test('ab')     //第六遍
false
reg2.test('ab')     //第七遍
true    
while(reg2.test('ab')){
  console.log(reg2.lastIndex);
}
控制台打印：
1
2

RegExp.prototype.exec(str)
使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性(lastIndex属性)以反映匹配结果  
如果没有匹配的文本则返回null，否则返回一个结果数组：
index声明匹配文本的第一个字符的位置
input存放被检索的字符串string
非全局调用
调用非全局的RegExp对象的exec()时，返回数组
第一个元素是与正则表达式相匹配的文本
第二个元素是与RegExpObject的第一个子表达式相匹配的文本（如果有的话）
第三个元素是与RegExp对象的第二个子表达式相匹配的文本（如果有的话），以此类推
在非全局下lastIndex不生效
var reg3=/\d(\w)(\w)\d/;
var reg4=/\d(\w)\d/g;
var ts='$1az2bb3cc4dd5ee';
var ret=reg3.exec(ts);
console.log(reg3.lastIndex+'\t'+ret.index+'\t'+ret.toString());

console.log(reg3.lastIndex+'\t'+ret.index+'\t'+ret.toString());

控制台打印：
"0  1 1az2,a,z"
"0  1 1az2,a,z"
ret
["1az2", "a", "z"]
var reg3=/\d(\w)(\w)\d/g;
var reg4=/\d(\w)\d/g;
var ts='$1az2bb3cc4dd5ee';
//var ret=reg3.exec(ts);
var ret=reg3.exec(ts);
console.log(reg3.lastIndex+'\t'+ret.index+'\t'+ret.toString());
"5  1 1az2,a,z"
ret
["1az2", "a", "z"]


String.prototype.search(reg)
search()方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串
方法返回第一个匹配结果index，查找不到返回-1
search()方法不执行全局匹配，它将忽略标志g，并且总是从字符创的开始进行检索
'a1b2c3d1'.search('1')
1
'a1b2c3d1'.search('10')
-1
'a1b2c3d1'.search(1)
1
'a1b2c3d1'.search(/1/)
1
'a1b2c3d1'.search(/1/g)
1
String.prototype.match(reg)
match()方法将检索字符串，以找到一个或多个与RegExp匹配的文本
RegExp是否具有标志g对结果影响很大
非全局调用
如果RegExp灭有标志g,那么match()方法就只能在字符串中执行一次匹配

如果没有找到任何匹配文本，将返回null
否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息
非全局调用
返回数组的第一个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本
除了常规的数组元素之外，返回的数组还含有2个对象属性：
index 声明匹配文本的起始字符在字符串的位置
input 声明对StringObject的引用
var reg3=/\d(\w)\d/;
var reg4=/\d(\w)\d/g;
var ts='$1a2b3c4d5e';
var ret=ts.match(reg3);
console.log(ret);
console.log(ret.index+'\t'+reg3.lastIndex);
控制台打印：
["1a2", "a"]
"1  0"
全局调用
如果RegExp具有标志g则match()方法将执行全局检索，找到字符串中的所有匹配子字符串
没有找到任何匹配的子串，则返回null
如果找到了一个或多个匹配 子串，则返回一个数组
数组元素中存放的是字符串中所有的匹配子串，而且也没有index属性或input属性
var reg3=/\d(\w)\d/;
var reg4=/\d(\w)\d/g;
var ts='$1a2b3c4d5e';
var ret=ts.match(reg3);
ret=ts.match(reg4);
console.log(ret);
console.log(ret.index+'\t'+reg4.lastIndex);
控制台打印：
["1a2", "3c4"]
"undefined  0"
String.prototype.split(reg)
我们经常使用split方法把字符串分割为字符数组
'a,b,c,d'.split(',');//["a","b","c","d"]
在一些复杂的分割情况下我们可以使用正则表达式解决
'a1b2c3d'.split(/\d/);//["a","b","c","d"]
String.prototype.replace
String.prototype.replace(str,replaceStr)
String.prototype.replace(reg,replaceStr)
String.prototype.replace(reg,function)
function参数含义
function会在每次匹配替换的时候调用，有四个参数：
匹配字符串；正则表达式分组内容，没有分组则没有该参数；匹配项在字符串中的index；原字符串。
'a1b'.replace('1',2)
"a2b"
'a1b1c1'.replace('1',2)
"a2b1c1"
'a1b1c1'.replace(/1/,2)
"a2b1c1"
'a1b1c1'.replace(/1/g,2)
"a2b2c2"
'a1b2c3d4e5'.replace(/\d/g,function(match,index,origin){console.log(index);return parseInt(match)+1;});
1
3
5
7
9
"a2b3c4d5e6"
'a1b2c3d4e5'.replace(/(\d)(\w)(\d)/g,function(match,group1,group2,group3,origin){console.log(match);return group1+group2;});
"1b2"
"3d4"
"a1bc3de5"
'a12c34e5'.replace(/(\d)(\w)(\d)/g,function(match,group1,group2,group3,origin){console.log(match);return group1+group2;});
"2c3"
"4e5"
"a12c4e"
'a1b2c3d4e5'.replace(/(\d)(\w)(\d)/g,function(match,group1,group2,group3,origin){console.log(match);return group1+group3;});
"1b2"
"3d4"
"a12c34e5"